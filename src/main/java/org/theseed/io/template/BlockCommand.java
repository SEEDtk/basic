/**
 *
 */
package org.theseed.io.template;

import java.util.ArrayList;
import java.util.List;

import org.theseed.io.FieldInputStream.Record;

/**
 * This is the base class for a block command.  Block commands are always generated by the compiler, not
 * the user, and simply concatenate all the sub-commands.
 * a
 * @author Bruce Parrello
 *
 */
public class BlockCommand extends TemplateCommand {

    // FIELDS
    /** list of sub-commands */
    private List<TemplateCommand> subCommands;
    /** name of command that created the block */
    private String name;

    /**
     * Construct a new block command.
     *
     * @param template	controlling master template
     * @param name		name of command that created the block
     */
    public BlockCommand(LineTemplate template, String name) {
        super(template);
        // Prepare for the sub-commands.
        this.subCommands = new ArrayList<TemplateCommand>();
        // Save the name to use for the block's commnd.
        this.name = name;
    }

    @Override
    protected void addCommand(TemplateCommand command) {
        this.subCommands.add(command);
        this.addEstimatedLength(command);
    }

    @Override
    protected String translate(Record line) {
        // Create a buffer for the sub-command translations.
        StringBuilder retVal = new StringBuilder(this.getEstimatedLength());
        for (var command :this.subCommands) {
            String subString = command.translate(line);
            retVal.append(subString);
        }
        return retVal.toString();
    }

    @Override
    protected String getName() {
        return this.name;
    }

}
